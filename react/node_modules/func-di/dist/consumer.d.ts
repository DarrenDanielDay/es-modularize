import { IoCContainer } from "./container.js";
import type { Dependencies, InjectionContext } from "./inject.js";
import { type DynamicInjectDependency } from "./token.js";
/**
 * `Consumer` is someone who just consume the dependencies.
 * `Consumer` instances are not managed by DI.
 * `Consumer` is also the end user of DI.
 */
export interface Consumer<D extends Dependencies, R> {
    readonly type: "di-consumer";
    readonly dependencies: D;
    /**
     * Instance factory.
     */
    readonly factory: (this: InjectionContext<D>, context: InjectionContext<D>) => R;
}
/**
 * Create a consumer with dependencies.
 * @param dependencies the dependencies
 * @param factory the instance factory function
 * @returns Consumer
 */
export declare const consumer: <D extends Dependencies, R>(dependencies: D, factory: (this: InjectionContext<D>, context: InjectionContext<D>) => R) => Consumer<D, R>;
export declare const dynamicConsumer: <R extends unknown>(factory: (container: IoCContainer) => R) => Consumer<DynamicInjectDependency, R>;
//# sourceMappingURL=consumer.d.ts.map