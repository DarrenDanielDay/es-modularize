import type * as React from "react";
import { type GeneralProvider, type IoCContainer } from "./container.js";
import type { Dependencies, InjectionContext } from "./inject.js";
import { Token } from "./token.js";
/**
 * The core DI context object of react.
 * If you want to dynamically inject and request dependencies, use `Provider/Consumer` of the context directly.
 */
export declare const IoCContext: React.Context<IoCContainer>;
interface InjectClause {
    <D extends Dependencies>(this: void, dependencies: D): {
        /**
         * Define component property type.
         */
        props: PropsClause<InjectionContext<D>>;
    };
}
declare type PropsGuard<P extends {}> = Pick<React.FC<P>, "propTypes" | "defaultProps">;
interface PropsClause<C extends {}> {
    <Exposed extends {}>(this: void, propsGuards?: PropsGuard<Exposed>): {
        /**
         * Merge properties and injected context for the render function.
         */
        composed: ComponentClause<Exposed, Exposed & C>;
        /**
         * Make an object wrapping both properties and injected context.
         */
        separated: ComponentClause<Exposed, {
            props: Exposed;
            ctx: C;
        }>;
        /**
         * Use custom selector as input of render function.
         */
        select: <Internal extends {}>(selector: (this: void, props: Exposed, ctx: C) => Internal) => ComponentClause<Exposed, Internal>;
    };
}
interface ComponentClause<Exposed extends {}, Internal extends {}> {
    /**
     * Create component as {@link React.FC}.
     */
    fc: FunctionalComponentClause<Exposed, Internal>;
    /**
     * Create component as {@link React.forwardRef}.
     */
    forwardRef: ForwardRefClause<Exposed, Internal>;
}
interface FunctionalComponentClause<Exposed extends {}, Internal extends {}> {
    (this: void, fc: React.FC<Internal>): React.FC<Exposed>;
    /**
     * Wrap component with {@link React.memo}.
     */
    memo: (this: void, fc: React.FC<Internal>) => React.MemoExoticComponent<React.FC<Exposed>>;
}
interface ForwardRefClause<Exposed extends {}, Internal extends {}> {
    <T>(this: void, fn: React.ForwardRefRenderFunction<T, Internal>): ReturnType<typeof React.forwardRef<T, Exposed>>;
    /**
     * Wrap component with {@link React.memo}.
     */
    memo: <T>(this: void, fn: React.ForwardRefRenderFunction<T, Internal>) => React.MemoExoticComponent<ReturnType<typeof React.forwardRef<T, Exposed>>>;
}
export declare const Inject: InjectClause;
declare type WrapperComponent = React.FC<React.PropsWithChildren>;
declare type ProviderComponent = React.MemoExoticComponent<WrapperComponent>;
interface ProvideClause {
    (this: void, providers: GeneralProvider[]): ContainerStrategyClause;
}
interface ContainerStrategyClause {
    /**
     * Create wrapper component with custom container selector.
     */
    as: (this: void, selectContainer: (this: void, parent: IoCContainer, providers: GeneralProvider[]) => IoCContainer) => ProviderComponent;
    /**
     * Create wrapper component with dependent container.
     */
    dependent: (this: void) => ProviderComponent;
    /**
     * Create wrapper component with forked child container.
     */
    fork: (this: void) => ProviderComponent;
    /**
     * Create wrapper component with container that overrides some implementations.
     */
    override: (this: void) => ProviderComponent;
}
export declare const Provide: ProvideClause;
/**
 * Create a new component connectted with `useInjection` hook.
 * React components cannot work directly with `useInjection` hook.
 * This helper function wraps the execution context for the given component.
 *
 * @param component react functional component
 * @returns a wrapped component
 */
export declare const connectInjectionHooks: <P extends {}>(component: React.FC<P>) => React.FC<P>;
/**
 * Short for `React.useContext(IoCContext)`.
 */
export declare const useContainer: () => IoCContainer;
/**
 * Short for `React.useContext(IoCContext).request(token)`.
 * @param token DI token
 * @returns implementation provided by container
 */
export declare const useContainerRequest: <T extends unknown>(token: Token<T>) => T;
export {};
//# sourceMappingURL=react.d.ts.map