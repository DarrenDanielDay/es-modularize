import { injectable } from "./injectable.js";
import { dynamicInjectable, token, __FUNC_DI_CONTAINER__ } from "./token.js";
describe("injectable.ts", () => {
    describe("injectable", () => {
        it("should be immutable", () => {
            const t1 = token("1");
            const t2 = token("2");
            const deps = { t2 };
            const factory = ({ t2 }) => {
                return {
                    foo: t2,
                };
            };
            const aInjectable = injectable(t1, deps, factory);
            expect(Object.isFrozen(aInjectable)).toBe(true);
            expect(aInjectable.dependencies).not.toBe(deps);
            expect(aInjectable.dependencies).toStrictEqual(deps);
            expect(Object.isFrozen(aInjectable.dependencies)).toBe(true);
        });
    });
    describe("dynamicInjectable", () => {
        it("should inject exactly one container", () => {
            const deps = dynamicInjectable(token(""), () => { }).dependencies;
            expect(deps).toStrictEqual({ c: __FUNC_DI_CONTAINER__ });
        });
    });
});
//# sourceMappingURL=injectable.spec.js.map