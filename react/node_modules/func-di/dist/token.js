import { injectable } from "./injectable.js";
import { freeze } from "./shared.js";
export const dynamicInjectable = (token, func, disposer) => injectable(token, { c: __FUNC_DI_CONTAINER__ }, ({ c }) => func.call(c, c), disposer);
export const token = (...args) => {
    const [name, defaultImpl] = args;
    const defaultImplProp = args.length === 1 ? {} : { default: defaultImpl };
    const result = {
        type: "di-token",
        key: Symbol(name),
        ...defaultImplProp,
        implementAs: (factory, disposer) => dynamicInjectable(result, factory, disposer),
    };
    return freeze(result);
};
export const tokenName = (token) => token.key.description;
export const implementation = (token, impl) => freeze({
    type: "di-impl",
    token,
    impl,
});
/**
 * @internal
 */
export const __FUNC_DI_CONTAINER__ = token("container");
//# sourceMappingURL=token.js.map