import type { Dependencies, InjectionContext } from "./inject.js";
import type { Token } from "./token.js";
/**
 * `Injectable` is someone who asks for dependencies and implements something.
 */
export interface Injectable<D extends Dependencies, R> {
    readonly type: "di-injectable";
    readonly token: Token<R>;
    readonly dependencies: D;
    /**
     * Instance factory.
     */
    readonly factory: (this: InjectionContext<D>, context: InjectionContext<D>) => R;
    /**
     * Define the way of disposing instance.
     */
    readonly disposer?: (this: void, instance: R) => void;
}
export declare const injectable: <D extends Dependencies, R>(token: Token<R>, dependencies: D, factory: (this: InjectionContext<D>, context: InjectionContext<D>) => R, disposer?: ((this: void, instance: R) => void) | undefined) => Injectable<D, R>;
export declare const factory: <R extends unknown>(token: Token<R>, func: () => R, disposer?: ((instance: R) => void) | undefined) => Injectable<{}, R>;
//# sourceMappingURL=injectable.d.ts.map