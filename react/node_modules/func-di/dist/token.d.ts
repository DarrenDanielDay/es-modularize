import type { IoCContainer } from "./container.js";
import { type Injectable } from "./injectable.js";
export declare type DynamicInjectDependency = {
    c: Token<IoCContainer>;
};
export declare const dynamicInjectable: <R extends unknown>(token: Token<R>, func: (this: IoCContainer, container: IoCContainer) => R, disposer?: ((this: void, instance: R) => void) | undefined) => Injectable<DynamicInjectDependency, R>;
/**
 * `Token` is a declaration of a specific dependency.
 */
export interface Token<T extends unknown> {
    readonly type: "di-token";
    readonly key: symbol;
    /**
     * The default implementation.
     */
    readonly default?: T;
    /**
     * @experimental
     */
    readonly implementAs: (factory: (this: IoCContainer, container: IoCContainer) => T, disposer?: (this: void, instance: T) => void) => Injectable<DynamicInjectDependency, T>;
}
export interface GeneralToken extends Token<any> {
}
export declare type TokenType<T extends GeneralToken> = T extends Token<infer U> ? U : never;
export declare const token: <T extends unknown>(name: string, defaultImpl?: T | undefined) => Token<T>;
export declare const tokenName: (token: GeneralToken) => string;
/**
 * `Implementation` contains a direct instance of a dependency.
 */
export interface Implementation<T> {
    readonly type: "di-impl";
    readonly token: Token<T>;
    readonly impl: T;
}
export declare const implementation: <T extends unknown>(token: Token<T>, impl: T) => Implementation<T>;
//# sourceMappingURL=token.d.ts.map