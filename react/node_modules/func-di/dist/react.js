import { createContext, useContext, memo, forwardRef, createElement, useMemo } from "react";
import { consumer } from "./consumer.js";
import { container } from "./container.js";
import { runInContainerScope } from "./hooks.js";
/**
 * The core DI context object of react.
 * If you want to dynamically inject and request dependencies, use `Provider/Consumer` of the context directly.
 */
export const IoCContext = createContext(container());
if (process.env.NODE_ENV !== "production") {
    IoCContext.displayName = "IoCContext";
}
export const Inject = (() => {
    const injectClause = (dependencies) => {
        const renderFn = (factory) => useContext(IoCContext).consume(consumer(dependencies, factory));
        const propsClause = (propGuards) => {
            const typed = propGuards
                ? (component) => Object.assign(component, propGuards)
                : (component) => component;
            const select = (selector) => {
                const functionalComponentClause = (() => {
                    const clause = (fc) => typed((props) => renderFn((ctx) => fc(selector(props, ctx))));
                    clause.memo = (...args) => memo(clause(...args));
                    return clause;
                })();
                const forwardRefClause = (() => {
                    const clause = (fn) => typed(forwardRef((props, ref) => renderFn((ctx) => fn(selector(props, ctx), ref))));
                    clause.memo = (...args) => memo(clause(...args));
                    return clause;
                })();
                return {
                    fc: functionalComponentClause,
                    forwardRef: forwardRefClause,
                };
            };
            return {
                composed: select((props, ctx) => ({ ...props, ...ctx })),
                separated: select((props, ctx) => ({ props, ctx })),
                select,
            };
        };
        return {
            props: propsClause,
        };
    };
    return injectClause;
})();
export const Provide = (() => {
    const provideClause = (providers) => {
        const as = (selectContainer) => {
            const fc = ({ children, }) => {
                const ioc = useContext(IoCContext);
                return createElement(IoCContext.Provider, { value: useMemo(() => selectContainer(ioc, providers), [ioc]) }, children);
            };
            return memo(fc);
        };
        return {
            as,
            dependent: () => as((_, providers) => container(providers)),
            fork: () => as((parent, providers) => parent.fork(providers)),
            override: () => as((parent, providers) => parent.override(providers)),
        };
    };
    return provideClause;
})();
/**
 * Create a new component connectted with `useInjection` hook.
 * React components cannot work directly with `useInjection` hook.
 * This helper function wraps the execution context for the given component.
 *
 * @param component react functional component
 * @returns a wrapped component
 */
export const connectInjectionHooks = (component) => Object.assign((...args) => runInContainerScope(useContext(IoCContext), () => component(...args)), component);
/**
 * Short for `React.useContext(IoCContext)`.
 */
export const useContainer = () => useContext(IoCContext);
/**
 * Short for `React.useContext(IoCContext).request(token)`.
 * @param token DI token
 * @returns implementation provided by container
 */
export const useContainerRequest = (token) => useContext(IoCContext).request(token);
//# sourceMappingURL=react.js.map